version: '3.8'

services:
  # PostgreSQL + TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: football_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-football_predictor}
      POSTGRES_USER: ${POSTGRES_USER:-predictor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD required}
      POSTGRES_INITDB_ARGS: "-E UTF8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-predictor}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - football_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: football_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD required}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - football_network

  # FastAPI Application
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        PYTHON_VERSION: "3.11"
    container_name: football_api
    environment:
      # Application
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY:?SECRET_KEY required}

      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-predictor}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-football_predictor}
      DB_POOL_SIZE: ${DB_POOL_SIZE:-20}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0

      # Model
      MODEL_VERSION: ${MODEL_VERSION:-1.0}
      BAYESIAN_SAMPLES: ${BAYESIAN_SAMPLES:-2000}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - model_cache:/app/model_cache
      - logs:/app/logs
    command: >
      gunicorn
      -w ${MAX_WORKERS:-4}
      -k uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8000
      --timeout ${WORKER_TIMEOUT:-30}
      --access-logfile /app/logs/access.log
      --error-logfile /app/logs/error.log
      --log-level ${LOG_LEVEL:-info}
      api.main:app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - football_network

  # Celery Worker (Background Tasks)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: football_worker
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-predictor}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-football_predictor}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
    depends_on:
      - postgres
      - redis
    volumes:
      - model_cache:/app/model_cache
      - logs:/app/logs
    command: celery -A tasks.celery worker --loglevel=info --concurrency=2
    restart: unless-stopped
    networks:
      - football_network

  # Celery Beat (Scheduler)
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: football_scheduler
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-predictor}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-football_predictor}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
    depends_on:
      - postgres
      - redis
    volumes:
      - logs:/app/logs
    command: celery -A tasks.celery beat --loglevel=info
    restart: unless-stopped
    networks:
      - football_network

  # Flower (Celery Monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: football_flower
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:?FLOWER_PASSWORD required}
    depends_on:
      - redis
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    command: celery -A tasks.celery flower --port=5555
    restart: unless-stopped
    networks:
      - football_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: football_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/epl-predictor/build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - football_network

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: football_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: unless-stopped
    networks:
      - football_network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: football_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:?GRAFANA_PASSWORD required}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SERVER_ROOT_URL: ${GRAFANA_URL:-http://localhost:3000}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - football_network

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: football_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@football.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:?PGADMIN_PASSWORD required}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - football_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_cache:
    driver: local
  logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  football_network:
    driver: bridge
