"""
EPL Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî (Ï†ïÌï©ÏÑ± Ï≤¥ÌÅ¨ Ìè¨Ìï®)
- Premier League API: ÌåÄ, ÏÑ†ÏàòÎã® Í∏∞Î≥∏ Ï†ïÎ≥¥ (Í≥µÏãù Î°úÏä§ÌÑ∞)
- FPL API: ÏÉÅÏÑ∏ Ï†ïÎ≥¥ (ÏÇ¨ÏßÑ, ÌÜµÍ≥Ñ)
- Îëê APIÏùò ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞Î•º Îß§Ïπ≠ÌïòÏó¨ ÌïòÎÇòÎ°ú ÌÜµÌï©
"""
import requests
import json
import sqlite3
from datetime import datetime
from difflib import SequenceMatcher
import os
import sys

SEASON_ID = 777

# ÌåÄ Ïù¥Î¶Ñ Îß§Ìïë (Premier League ‚Üí Ïö∞Î¶¨ ÏãúÏä§ÌÖú)
TEAM_NAME_MAPPING = {
    'Arsenal': 'Arsenal',
    'Aston Villa': 'Aston Villa',
    'Bournemouth': 'Bournemouth',
    'Brentford': 'Brentford',
    'Brighton & Hove Albion': 'Brighton',
    'Burnley': 'Burnley',
    'Chelsea': 'Chelsea',
    'Crystal Palace': 'Crystal Palace',
    'Everton': 'Everton',
    'Fulham': 'Fulham',
    'Leeds United': 'Leeds',
    'Liverpool': 'Liverpool',
    'Manchester City': 'Man City',
    'Manchester United': 'Man Utd',
    'Newcastle United': 'Newcastle',
    'Nottingham Forest': "Nott'm Forest",
    'Sunderland': 'Sunderland',
    'Tottenham Hotspur': 'Spurs',
    'West Ham United': 'West Ham',
    'Wolverhampton Wanderers': 'Wolves'
}

# FPL ÌåÄ ID Îß§Ìïë (Ïö∞Î¶¨ ÏãúÏä§ÌÖú Ïù¥Î¶Ñ ‚Üí FPL ÌåÄ ID)
FPL_TEAM_ID_MAPPING = {
    'Arsenal': 1,
    'Aston Villa': 2,
    'Burnley': 3,
    'Bournemouth': 4,
    'Brentford': 5,
    'Brighton': 6,
    'Chelsea': 7,
    'Crystal Palace': 8,
    'Everton': 9,
    'Fulham': 10,
    'Leeds': 11,
    'Liverpool': 12,
    'Man City': 13,
    'Man Utd': 14,
    'Newcastle': 15,
    "Nott'm Forest": 16,
    'Sunderland': 17,
    'Spurs': 18,
    'West Ham': 19,
    'Wolves': 20
}

# get_position() Ìï®Ïàò Ï†úÍ±∞ - Premier League APIÏùò positionInfoÎ•º Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©

def similarity(a, b):
    """Îëê Î¨∏ÏûêÏó¥Ïùò Ïú†ÏÇ¨ÎèÑ Í≥ÑÏÇ∞ (0~1)"""
    return SequenceMatcher(None, a.lower(), b.lower()).ratio()

def match_player(pl_player, fpl_players):
    """
    Premier League ÏÑ†ÏàòÏôÄ FPL ÏÑ†Ïàò Îß§Ïπ≠

    Returns:
        (fpl_player, match_type) ÎòêÎäî (None, None)
    """
    pl_name = pl_player['name']
    pl_first = pl_player['first_name']
    pl_last = pl_player['last_name']

    best_match = None
    best_score = 0
    match_type = None

    for fpl_player in fpl_players:
        fpl_web = fpl_player['web_name']
        fpl_first = fpl_player['first_name']
        fpl_second = fpl_player['second_name']
        fpl_full = fpl_player['full_name']

        # Î∞©Î≤ï 1: Full name exact match
        if pl_name.lower() == fpl_full.lower():
            return fpl_player, 'FULL_NAME_EXACT'

        # Î∞©Î≤ï 2: Last name exact match
        if pl_last and fpl_second and pl_last.lower() == fpl_second.lower():
            score = similarity(pl_name, fpl_full)
            if score > best_score:
                best_match = fpl_player
                best_score = score
                match_type = 'LAST_NAME'

        # Î∞©Î≤ï 3: Web name in PL name
        if fpl_web.lower() in pl_name.lower() or pl_name.lower() in fpl_web.lower():
            score = similarity(pl_name, fpl_full)
            if score > best_score:
                best_match = fpl_player
                best_score = score
                match_type = 'WEB_NAME'

        # Î∞©Î≤ï 4: Fuzzy matching (similarity > 0.8)
        score = similarity(pl_name, fpl_full)
        if score > 0.8 and score > best_score:
            best_match = fpl_player
            best_score = score
            match_type = f'FUZZY_{score:.2f}'

    if best_match and best_score > 0.7:
        return best_match, match_type

    return None, None

def fetch_premier_league_teams():
    """Premier League APIÏóêÏÑú ÌåÄ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞"""
    print("\n[1/4] Premier League API - ÌåÄ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞...")

    headers = {
        'Origin': 'https://www.premierleague.com',
        'User-Agent': 'Mozilla/5.0'
    }

    teams_url = f'https://footballapi.pulselive.com/football/teams?pageSize=100&compSeasons={SEASON_ID}'
    response = requests.get(teams_url, headers=headers, timeout=30)
    response.raise_for_status()
    teams_data = response.json()

    teams_info = {}
    for team in teams_data['content']:
        pl_name = team['name']
        our_name = TEAM_NAME_MAPPING.get(pl_name, pl_name)
        teams_info[int(team['id'])] = {
            'id': int(team['id']),
            'name': our_name,
            'full_name': pl_name,
            'short_name': team.get('shortName', our_name),
            'abbr': team['club']['abbr']
        }
        print(f"   ‚úì {pl_name:35s} ‚Üí {our_name}")

    print(f"\n‚úÖ {len(teams_info)}Í∞ú ÌåÄ Î°úÎìú ÏôÑÎ£å")
    return teams_info

def fetch_fpl_data():
    """FPL APIÏóêÏÑú Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞"""
    print("\n[2/4] FPL API - ÏÑ†Ïàò ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞...")

    fpl_url = 'https://fantasy.premierleague.com/api/bootstrap-static/'
    response = requests.get(fpl_url, timeout=30)
    response.raise_for_status()
    data = response.json()

    # ÌåÄÎ≥ÑÎ°ú ÏÑ†Ïàò Î∂ÑÎ•ò
    fpl_by_team = {}
    for team_name, fpl_team_id in FPL_TEAM_ID_MAPPING.items():
        team_players = []
        for player in data['elements']:
            if player['team'] == fpl_team_id:
                team_players.append({
                    'id': player['id'],
                    'web_name': player['web_name'],
                    'first_name': player['first_name'],
                    'second_name': player['second_name'],
                    'full_name': f"{player['first_name']} {player['second_name']}".strip(),
                    'photo_code': str(player['code']),
                    'position': player['element_type'],  # 1=GK, 2=DF, 3=MF, 4=FW
                    'now_cost': player['now_cost'],
                    'appearances': player.get('starts', 0),  # FPL APIÎäî 'starts' ÏÇ¨Ïö©
                    'goals': player.get('goals_scored', 0),
                    'assists': player.get('assists', 0),
                    'clean_sheets': player.get('clean_sheets', 0),
                    'minutes': player.get('minutes', 0)
                })
        fpl_by_team[team_name] = team_players

    total_fpl = sum(len(p) for p in fpl_by_team.values())
    print(f"   ‚úÖ {total_fpl}Î™Ö ÏÑ†Ïàò Î°úÎìú (20Í∞ú ÌåÄ)")

    return fpl_by_team

def fetch_and_match_players(teams_info, fpl_by_team):
    """Premier League APIÏóêÏÑú ÏÑ†Ïàò Í∞ÄÏ†∏ÏôÄÏÑú FPL Îç∞Ïù¥ÌÑ∞ÏôÄ Îß§Ïπ≠"""
    print("\n[3/4] ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Î∞è Îß§Ïπ≠...")

    headers = {
        'Origin': 'https://www.premierleague.com',
        'User-Agent': 'Mozilla/5.0'
    }

    all_players = {}
    total_matched = 0
    total_unmatched = 0
    total_fpl_only = 0

    for team_id, team_info in teams_info.items():
        team_name = team_info['name']
        print(f"\nüìã {team_name}...")

        # Premier League APIÏóêÏÑú ÏÑ†ÏàòÎã® Í∞ÄÏ†∏Ïò§Í∏∞
        staff_url = f'https://footballapi.pulselive.com/football/teams/{team_id}/compseasons/{SEASON_ID}/staff'
        staff_response = requests.get(staff_url, headers=headers, timeout=30)
        staff_response.raise_for_status()
        staff_data = staff_response.json()

        team_players = []
        matched_fpl_ids = set()

        # Premier League ÏÑ†Ïàò Ï≤òÎ¶¨
        for player in staff_data.get('players', []):
            if player.get('info', {}).get('loan'):
                continue

            info = player.get('info', {})
            name_data = player.get('name', {})
            player_id = int(player.get('id', 0))

            # ÎÇòÏù¥ Í≥ÑÏÇ∞
            age_str = player.get('age', '')
            age = 0
            if 'years' in age_str:
                try:
                    age = int(age_str.split('years')[0].strip())
                except:
                    age = 0

            # Premier League APIÏùò positionInfoÎ•º Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
            position = info.get('positionInfo', 'Central Midfielder')
            shirt_num = int(info.get('shirtNum', 0)) if info.get('shirtNum') else 0

            pl_player = {
                'id': player_id,
                'name': name_data.get('display', ''),
                'first_name': name_data.get('first', ''),
                'last_name': name_data.get('last', ''),
                'position': position,
                'number': shirt_num,
                'age': age
            }

            # FPL Îç∞Ïù¥ÌÑ∞ÏôÄ Îß§Ïπ≠
            fpl_players = fpl_by_team.get(team_name, [])
            fpl_match, match_type = match_player(pl_player, fpl_players)

            if fpl_match:
                matched_fpl_ids.add(fpl_match['id'])
                player_data = {
                    'id': player_id,
                    'name': pl_player['name'],
                    'position': position,
                    'number': shirt_num,
                    'age': age,
                    'team_id': team_id,
                    'team_name': team_name,
                    'nationality': '',
                    'photo': fpl_match['photo_code'],
                    'is_starter': fpl_match['appearances'] > 5,
                    'stats': {
                        'appearances': fpl_match['appearances'],
                        'starts': fpl_match['appearances'],
                        'minutes': fpl_match['minutes'],
                        'goals': fpl_match['goals'],
                        'assists': fpl_match['assists'],
                        'clean_sheets': fpl_match['clean_sheets']
                    }
                }
                total_matched += 1
                print(f"   ‚úì {pl_player['name']:30s} ‚Üî {fpl_match['web_name']:20s} ({match_type})")
            else:
                # FPL Îß§Ïπ≠ Ïã§Ìå® - PL Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©
                player_data = {
                    'id': player_id,
                    'name': pl_player['name'],
                    'position': position,
                    'number': shirt_num,
                    'age': age,
                    'team_id': team_id,
                    'team_name': team_name,
                    'nationality': '',
                    'photo': '',
                    'is_starter': False,
                    'stats': {
                        'appearances': player.get('appearances', 0),
                        'starts': player.get('appearances', 0),
                        'minutes': 0,
                        'goals': player.get('goals', 0) if player.get('goals') else 0,
                        'assists': player.get('assists', 0) if player.get('assists') else 0,
                        'clean_sheets': player.get('cleanSheets', 0)
                    }
                }
                total_unmatched += 1
                print(f"   ‚ö†Ô∏è {pl_player['name']:30s} (Îß§Ïπ≠ Ïã§Ìå® - PL Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©)")

            team_players.append(player_data)

        # FPLÏóêÎßå ÏûàÎäî ÏÑ†Ïàò Ï∂îÍ∞Ä (Ï§ëÏöî ÏÑ†Ïàò ÎàÑÎùΩ Î∞©ÏßÄ)
        fpl_players = fpl_by_team.get(team_name, [])
        for fpl_player in fpl_players:
            # Ï∂úÏ†Ñ Í∏∞Î°ùÏù¥ ÏûàÍ≥† Îß§Ïπ≠ ÏïàÎêú ÏÑ†ÏàòÎßå Ï∂îÍ∞Ä
            if fpl_player['id'] not in matched_fpl_ids:
                # FPL element_typeÏùÑ Premier League API Ìè¨ÏßÄÏÖò ÌòïÏãùÏúºÎ°ú Îß§Ìïë
                # 1=GK, 2=DF, 3=MF, 4=FW ‚Üí Premier League API Ìè¨ÏßÄÏÖò Î¨∏ÏûêÏó¥
                fpl_position_map = {
                    1: 'Goalkeeper',
                    2: 'Central Defender',
                    3: 'Central Midfielder',
                    4: 'Striker'
                }
                position = fpl_position_map.get(fpl_player['position'], 'Central Midfielder')

                # FPL IDÎ•º Îß§Ïö∞ ÌÅ∞ ÏàòÎ°ú Î≥ÄÌôòÌïòÏó¨ Ï§ëÎ≥µ Î∞©ÏßÄ (100ÏñµÎåÄ)
                synthetic_id = 10000000000 + fpl_player['id']

                player_data = {
                    'id': synthetic_id,
                    'name': fpl_player['full_name'],
                    'position': position,
                    'number': 0,  # Îì±Î≤àÌò∏ Ï†ïÎ≥¥ ÏóÜÏùå
                    'age': 0,
                    'team_id': team_id,
                    'team_name': team_name,
                    'nationality': '',
                    'photo': fpl_player['photo_code'],
                    'is_starter': fpl_player['appearances'] > 5,
                    'stats': {
                        'appearances': fpl_player['appearances'],
                        'starts': fpl_player['appearances'],
                        'minutes': fpl_player['minutes'],
                        'goals': fpl_player['goals'],
                        'assists': fpl_player['assists'],
                        'clean_sheets': fpl_player['clean_sheets']
                    }
                }
                team_players.append(player_data)
                total_fpl_only += 1
                print(f"   + {fpl_player['full_name']:30s} (FPLÏóêÎßå ÏûàÏùå - Ï∂îÍ∞Ä, App:{fpl_player['appearances']})")

        all_players[team_name] = team_players
        print(f"   ‚úÖ {len(team_players)}Î™Ö")

    print(f"\nüìä Îß§Ïπ≠ ÌÜµÍ≥Ñ:")
    print(f"   ‚úì Îß§Ïπ≠ ÏÑ±Í≥µ: {total_matched}Î™Ö")
    print(f"   ‚ö†Ô∏è PLÎßå ÏÇ¨Ïö©: {total_unmatched}Î™Ö")
    print(f"   + FPLÎßå Ï∂îÍ∞Ä: {total_fpl_only}Î™Ö")

    return all_players

def update_database(teams_info, all_players):
    """SQLite Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏"""
    print("\n[4/4] Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...")

    db_path = os.path.join(
        os.path.dirname(os.path.dirname(__file__)),
        'data',
        'epl_data.db'
    )

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # teams ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏
        print("\nüìä teams ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏...")
        cursor.execute("DELETE FROM teams")

        for team_info in teams_info.values():
            cursor.execute("""
                INSERT INTO teams (id, name, short_name, stadium, manager, founded, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
            """, (
                team_info['id'],
                team_info['name'],
                team_info['short_name'],
                '',
                '',
                0
            ))

        print(f"   ‚úÖ {len(teams_info)}Í∞ú ÌåÄ ÏÇΩÏûÖ")

        # players ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏
        print("\nüìä players ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏...")

        cursor.execute("SELECT player_id FROM player_ratings")
        rated_players = [row[0] for row in cursor.fetchall()]
        print(f"   ‚ÑπÔ∏è  ÌèâÍ∞ÄÎêú ÏÑ†Ïàò: {len(rated_players)}Î™Ö (Ïú†ÏßÄÎê®)")

        cursor.execute("DELETE FROM players")

        player_count = 0
        seen_ids = set()
        skipped_duplicates = 0

        for team_name, players in all_players.items():
            for player in players:
                # ID Ï§ëÎ≥µ Ï≤¥ÌÅ¨
                if player['id'] in seen_ids:
                    skipped_duplicates += 1
                    print(f"   ‚ö†Ô∏è  Ï§ëÎ≥µ ID Ïä§ÌÇµ: {player['name']} (ID: {player['id']})")
                    continue

                seen_ids.add(player['id'])

                try:
                    cursor.execute("""
                        INSERT INTO players (
                            id, team_id, name, position, detailed_position, number, age,
                            nationality, height, foot, market_value, contract_until,
                            appearances, goals, assists, photo_url,
                            created_at, updated_at
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
                    """, (
                        player['id'],
                        player['team_id'],
                        player['name'],
                        player['position'],
                        '',
                        player['number'],
                        player['age'],
                        player['nationality'],
                        '',
                        '',
                        '',
                        '',
                        player['stats']['appearances'],
                        player['stats']['goals'],
                        player['stats']['assists'],
                        player['photo'],
                    ))
                    player_count += 1
                except sqlite3.IntegrityError as e:
                    print(f"   ‚ö†Ô∏è  ÏÇΩÏûÖ Ïã§Ìå®: {player['name']} - {e}")
                    continue

        print(f"   ‚úÖ {player_count}Î™Ö ÏÑ†Ïàò ÏÇΩÏûÖ")
        if skipped_duplicates > 0:
            print(f"   ‚ö†Ô∏è  {skipped_duplicates}Î™Ö Ï§ëÎ≥µ Ïä§ÌÇµÎê®")

        cursor.execute("""
            DELETE FROM player_ratings
            WHERE player_id NOT IN (SELECT id FROM players)
        """)
        deleted = cursor.rowcount
        if deleted > 0:
            print(f"   ‚ö†Ô∏è  {deleted}Í∞ú ÌèâÍ∞Ä Ï†úÍ±∞Îê® (ÏÑ†Ïàò Ïù¥Ï†Å/Ï†úÏô∏)")

        conn.commit()
        print("\n‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")

    except Exception as e:
        conn.rollback()
        print(f"\n‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïò§Î•ò: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        conn.close()

    return True

def update_squad_data_file(all_players):
    """squad_data.py ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏"""
    print("\nüìù squad_data.py ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...")

    output_path = os.path.join(
        os.path.dirname(os.path.dirname(__file__)),
        'data',
        'squad_data.py'
    )

    # ÌåÄÎ≥Ñ ÏÑ†Ïàò Ï†ïÎ†¨
    squad_data = {}
    for team_name, players in all_players.items():
        position_order = {'GK': 0, 'DF': 1, 'MF': 2, 'FW': 3}
        sorted_players = sorted(players, key=lambda p: (
            position_order.get(p['position'], 4),
            p['number'] if p['number'] else 999
        ))
        squad_data[team_name] = sorted_players

    with open(output_path, 'w', encoding='utf-8') as f:
        f.write('"""\n')
        f.write('EPL Ï†ÑÏ≤¥ ÌåÄ ÏÑ†Ïàò Î™ÖÎã®\n')
        f.write(f'ÏûêÎèô ÏÉùÏÑ±Îê®: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
        f.write('ÏãúÏ¶å: 2025-26\n')
        f.write('Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§: Premier League API + FPL API (Ï†ïÌï©ÏÑ± Îß§Ïπ≠)\n')
        f.write('"""\n\n')
        json_str = json.dumps(squad_data, indent=4, ensure_ascii=False)
        json_str = json_str.replace(': true', ': True').replace(': false', ': False')
        f.write(f'SQUAD_DATA = {json_str}\n\n')
        f.write('def get_squad(team_name):\n')
        f.write('    """ÌåÄ Ïù¥Î¶ÑÏúºÎ°ú ÏÑ†Ïàò Î™ÖÎã® Í∞ÄÏ†∏Ïò§Í∏∞"""\n')
        f.write('    return SQUAD_DATA.get(team_name, [])\n\n')
        f.write('def get_all_teams():\n')
        f.write('    """Î™®Îì† ÌåÄ Ïù¥Î¶Ñ Î¶¨Ïä§Ìä∏"""\n')
        f.write('    return list(SQUAD_DATA.keys())\n')

    print(f"   ‚úÖ ÌååÏùº Ï†ÄÏû•: {output_path}")

if __name__ == '__main__':
    print("\n" + "="*80)
    print("üöÄ EPL Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî (Ï†ïÌï©ÏÑ± Ï≤¥ÌÅ¨ Ìè¨Ìï®)")
    print("="*80)

    try:
        # 1. Premier League API - ÌåÄ
        teams_info = fetch_premier_league_teams()

        # 2. FPL API - ÏÑ†Ïàò ÏÉÅÏÑ∏ Ï†ïÎ≥¥
        fpl_by_team = fetch_fpl_data()

        # 3. ÏÑ†Ïàò Îß§Ïπ≠
        all_players = fetch_and_match_players(teams_info, fpl_by_team)

        # 4. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
        if not update_database(teams_info, all_players):
            print("\n‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®")
            sys.exit(1)

        # 5. squad_data.py ÏóÖÎç∞Ïù¥Ìä∏
        update_squad_data_file(all_players)

        # ÏµúÏ¢Ö ÌÜµÍ≥Ñ
        print("\n" + "="*80)
        print("üìä ÏµúÏ¢Ö ÌÜµÍ≥Ñ")
        print("="*80)
        print(f"ÌåÄ: {len(teams_info)}Í∞ú")
        print(f"ÏÑ†Ïàò: {sum(len(p) for p in all_players.values())}Î™Ö")
        print("\nÌåÄÎ≥Ñ ÏÑ†Ïàò Ïàò:")
        for team_name, players in sorted(all_players.items()):
            print(f"  {team_name:25s}: {len(players):2d}Î™Ö")

        print("\n" + "="*80)
        print("‚úÖ Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÏôÑÎ£å!")
        print("="*80)
        print("\nÎã§Ïùå Îã®Í≥Ñ:")
        print("  1. Î∞±ÏóîÎìú ÏÑúÎ≤Ñ Ïû¨ÏãúÏûë")
        print("  2. ÌîÑÎ°†Ìä∏ÏóîÎìú ÏÉàÎ°úÍ≥†Ïπ®")
        print("  3. ÌåÄ/ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏")

    except Exception as e:
        print(f"\n‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
